#!/usr/bin/env python3
"""
Simple .env file creator for API keys.
This is a non-interactive version for environments without terminal support.
"""

import os
from pathlib import Path

def create_env_template():
    """Create .env file template for manual editing."""
    
    print("üîë API Key Setup for Agent Benchmark")
    print("=" * 50)
    print("Creating .env template file for manual editing...")
    print()
    
    # Check if .env already exists
    env_path = Path(".env")
    if env_path.exists():
        print("‚ö†Ô∏è  .env file already exists. Backing up to .env.backup")
        env_path.rename(".env.backup")
    
    # Create .env template
    env_content = f"""# API Keys for LLM Agent Benchmark
# Generated by create_env.py on {os.popen('date').read().strip()}

# OpenAI API Key
# Get from: https://platform.openai.com/api-keys
# Replace 'YOUR_OPENAI_KEY_HERE' with your actual key (starts with sk-)
OPENAI_API_KEY=YOUR_OPENAI_KEY_HERE

# Anthropic API Key  
# Get from: https://console.anthropic.com/settings/keys
# Replace 'YOUR_ANTHROPIC_KEY_HERE' with your actual key (starts with sk-ant-)
ANTHROPIC_API_KEY=YOUR_ANTHROPIC_KEY_HERE

# Evaluation Settings
LOG_LEVEL=INFO
MAX_RETRIES=3
REQUEST_TIMEOUT=60
"""
    
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        
        # Set secure permissions
        os.chmod(".env", 0o600)  # Read/write for owner only
        
        print("‚úÖ .env template created successfully!")
        print()
        print("üìù Next steps:")
        print("1. Edit .env file and replace YOUR_OPENAI_KEY_HERE with your OpenAI API key")
        print("2. Replace YOUR_ANTHROPIC_KEY_HERE with your Anthropic API key")
        print("3. Run: python3 test_api_connection.py")
        print("4. Run demo: python3 demo_evaluation.py")
        print()
        print("üîë Get API keys from:")
        print("   ‚Ä¢ OpenAI: https://platform.openai.com/api-keys")
        print("   ‚Ä¢ Anthropic: https://console.anthropic.com/settings/keys")
        print()
        print("üîí Security: .env file has secure permissions and is excluded from git")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False

if __name__ == "__main__":
    create_env_template()