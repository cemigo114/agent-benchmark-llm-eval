#!/usr/bin/env python3
"""
Interactive setup script for API keys.
Run this script to securely set up your API keys.
"""

import os
import getpass
from pathlib import Path

def setup_api_keys():
    """Interactive setup for API keys."""
    
    print("üîë API Key Setup for Agent Benchmark")
    print("=" * 50)
    print("This script will help you securely set up your API keys.")
    print("Keys will be saved to a .env file (excluded from git).")
    print()
    
    # Check if .env already exists
    env_path = Path(".env")
    if env_path.exists():
        overwrite = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ")
        if overwrite.lower() != 'y':
            print("‚ùå Setup cancelled.")
            return
    
    # Collect API keys
    print("üìù Please enter your API keys:")
    print()
    
    # OpenAI API Key
    print("ü§ñ OpenAI API Key")
    print("   Get from: https://platform.openai.com/api-keys")
    openai_key = getpass.getpass("   Enter OpenAI API key (sk-...): ")
    
    if not openai_key.startswith('sk-'):
        print("‚ö†Ô∏è  Warning: OpenAI keys typically start with 'sk-'")
        confirm = input("   Continue anyway? (y/N): ")
        if confirm.lower() != 'y':
            print("‚ùå Setup cancelled.")
            return
    
    print()
    
    # Anthropic API Key
    print("üß† Anthropic API Key")
    print("   Get from: https://console.anthropic.com/settings/keys")
    anthropic_key = getpass.getpass("   Enter Anthropic API key (sk-ant-...): ")
    
    if not anthropic_key.startswith('sk-ant-'):
        print("‚ö†Ô∏è  Warning: Anthropic keys typically start with 'sk-ant-'")
        confirm = input("   Continue anyway? (y/N): ")
        if confirm.lower() != 'y':
            print("‚ùå Setup cancelled.")
            return
    
    print()
    
    # Write .env file
    env_content = f"""# API Keys for LLM Agent Benchmark
# Generated by setup_keys.py on {os.popen('date').read().strip()}

# OpenAI API Key
OPENAI_API_KEY={openai_key}

# Anthropic API Key  
ANTHROPIC_API_KEY={anthropic_key}

# Evaluation Settings
LOG_LEVEL=INFO
MAX_RETRIES=3
REQUEST_TIMEOUT=60
"""
    
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        
        # Set secure permissions
        os.chmod(".env", 0o600)  # Read/write for owner only
        
        print("‚úÖ API keys saved successfully!")
        print()
        print("üìã Next steps:")
        print("1. Run demo: python demo_evaluation.py")
        print("2. Test API connection: python test_api_connection.py")
        print("3. Run full benchmark: python main.py --models gpt4 claude3 --trials 3")
        print()
        print("üîí Security note: .env file is excluded from git and has secure permissions.")
        
    except Exception as e:
        print(f"‚ùå Error saving API keys: {e}")
        return False
    
    return True

def test_env_loading():
    """Test if .env file can be loaded properly."""
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        openai_key = os.getenv('OPENAI_API_KEY')
        anthropic_key = os.getenv('ANTHROPIC_API_KEY')
        
        if openai_key and anthropic_key:
            print("‚úÖ Environment variables loaded successfully!")
            print(f"   OpenAI key: {openai_key[:8]}...{openai_key[-4:]}")
            print(f"   Anthropic key: {anthropic_key[:8]}...{anthropic_key[-4:]}")
            return True
        else:
            print("‚ùå API keys not found in environment")
            return False
            
    except ImportError:
        print("‚ö†Ô∏è  python-dotenv not installed. Install with: pip install python-dotenv")
        return False
    except Exception as e:
        print(f"‚ùå Error loading environment: {e}")
        return False

if __name__ == "__main__":
    if setup_api_keys():
        print()
        test_env_loading()